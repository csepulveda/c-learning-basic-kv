        -:    0:Source:src/protocol.c
        -:    0:Graph:bin/test_protocol-protocol.gcno
        -:    0:Data:bin/test_protocol-protocol.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include "protocol.h"
        -:    3:
        2:    4:command_t parse_command(const char *message) {
        2:    5:    if (strncmp(message, "PING", 4) == 0) return CMD_PING;
        1:    6:    if (strncmp(message, "TIME", 4) == 0) return CMD_TIME;
        1:    7:    if (strncmp(message, "GOODBYE", 7) == 0) return CMD_GOODBYE;
        1:    8:    if (strncmp(message, "SET ", 4) == 0) return CMD_SET;
    #####:    9:    if (strncmp(message, "GET ", 4) == 0) return CMD_GET;
    #####:   10:    if (strncmp(message, "DEL ", 4) == 0) return CMD_DEL;
    #####:   11:    return CMD_UNKNOWN;
        2:   12:}
        -:   13:
        1:   14:int extract_key_value(const char *message, char *key, char *value, size_t key_size, size_t value_size) {
        1:   15:    const char *space = strchr(message, ' ');
        1:   16:    if (!space) return -1;
        -:   17:
        1:   18:    const char *equal = strchr(space + 1, '=');
        1:   19:    if (!equal) return -1;
        -:   20:
        1:   21:    size_t key_len = equal - (space + 1);
        1:   22:    size_t value_len = strlen(equal + 1);
        -:   23:
        1:   24:    if (key_len >= key_size || value_len >= value_size) return -1;
        -:   25:
        1:   26:    strncpy(key, space + 1, key_len);
        1:   27:    key[key_len] = '\0';
        -:   28:
        1:   29:    strncpy(value, equal + 1, value_size - 1);
        1:   30:    value[value_size - 1] = '\0';
        -:   31:
        -:   32:    // Eliminar salto de l√≠nea si existe
        1:   33:    char *newline = strchr(value, '\n');
        1:   34:    if (newline) *newline = '\0';
        -:   35:
        1:   36:    return 0;
        1:   37:}
        -:   38:
        1:   39:int extract_key(const char *message, char *key, size_t key_size) {
        1:   40:    const char *space = strchr(message, ' ');
        1:   41:    if (!space) return -1;
        -:   42:
        1:   43:    space++;  // skip the space
        1:   44:    while (*space == ' ') space++; // skip extra spaces
        -:   45:
        1:   46:    if (*space == '\0') return -1;
        -:   47:
        1:   48:    strncpy(key, space, key_size - 1);
        1:   49:    key[key_size - 1] = '\0';
        -:   50:
        -:   51:    // Remove newline if any
        1:   52:    char *newline = strchr(key, '\n');
        1:   53:    if (newline) *newline = '\0';
        -:   54:
        1:   55:    return 0;
        1:   56:}
